Gekioko PunPun Maru (激怒ぷんぷん丸) 
Game for Master System 

2015.10.31	15 Dec 2013	MtChocolate

From the creator of Fix-It Felix Jr for the Sega Mega Drive and the bizarre adaptation of Pringles in video game 
form comes an all new homebrew hit for the Sega Master System. 
This frantic arcade style platformer known as Geki Oko PunPun Maru is based upon the imaginary NES game of 
the same named meme, offering a vibrant visual style and addictive gameplay to boot.

If anything, Geki Oko PunPun Maru features very similar action to that of the original arcade title Mario Bros. 
Instead of spiny shells spawning and heading down to attack, ninjas come flying from above and it's up to you 
to tackle them with your vertical shooting huffs and puffs over 12 stages. This strange projectile is a play 
on the game's title which according to the origin of the meme roughly translates to 'being angry, in a cute way'.

Internet and Japanese culture aside, Mega Drive and Master System developer Future Driver has released this 
unique ROM for free online which can be downloaded below - just don't lose your cool playing it!



Traslated from http://68000.web.fc2.com/oko/:

Introduction
Actually the hardest topic of Famicom in recent years, actually Sega's hard was out!
Unlike the NES version, the stage does not scroll horizontally. If you defeat all the enemies that appear one after 
another on the stage it is stage clear. There are 12 stages which multiplied the four seasons with morning, noon and night. 
The corresponding model is domestic master system and Mark III. It does not correspond to FM sound source. 


How to play

Button and operation method
Button 1 ... ... I will give you smoke. Put smoke on the enemy and knock it down.
Button 2 ... I will jump. Dumplings die when they touch enemies.

When you are on standby at the low position of the stage, it is treated as a weak camper. The remaining time will decrease without mercy. 
If time runs out, time over. The lower position is easier to target the enemy, but let's wait as high as possible for the high score!
If you defeat all the enemies, the eggplant (stick) sticky (bonus) comes down. Before moving on to the next stage, get all the bonus quickly.

Stage introduction Spring stage ... The wind is calm, the enemies are calm, here's the break-in.
Summer stage ... Do not be deprived of the heat, enemies are not sweet at all times.
The stage of autumn ... Oya Hello Win? The ghosts will come out.
Winter stage ... the ground froze! Slippery While sliding, the last one climb!

Debug · other contact information
Twitter: @ MtChocolate (Private message without followers is also OK)
Mail: youichi.minami@gmail.com (If you change your last name and name, it will be the real address)



Development story

The beginning of the thing is the Famicom version created by Mr. sw sweet dude ( sm 20604710 ). Although it is only sound test in the animation, 
development is proceeding to a place where secretly side scrolling is done secretly by Dempsei Dojin drawing a dot picture later. Looking at this, 
"Yabe, I will make it!" It was a translation. By the way, even when Kadoma Namu went to Bad Apple !! PV-FC, I made "Mr. Yabe, I will make it !!" 
and made a mega drive version, this time it is the same nori.

First around April 2013, we began development with MegaDrive (68000 + GCC) that we were accustomed to for many years. The game system is almost 
completed in about two days. Later, as the development language was C, it was a premise to shift to the 8-bit platform such as Famicom (6502) 
and master system (Z80), so all data except the extremely partial addressing such as VRAM access are stored in 8- I am coding to fit it. 
After that, for a while, we moved the platform from mega drive to the master system at last only around August 2013. Since the development 
language is C, even if the platform changes, if you are careful about coding, you do not have to rewrite anything other than the contents 
of the hardware specific functions, and in fact they will work without difficulty as soon as those functions are ready I was able to do things.

The first impression when I ran on the emulator, "Z80 is fairly fast even if I code it in C!" I was worried that it may be less than 30 fps at 
the beginning, but unexpectedly, 30 fps and 60 fps I'm going back and forth between. I thought that I'm going to die, and as a result of 
optimizing on C source, I was able to achieve 60 fps all the time. Since it was a policy to develop to C to the last this time, the assembler 
source has not touched it except the startup routine. The VRAM writing routine in VBLANK is even C.

After that I confirmed that 60 fps could be maintained even on actual machine, but unlike mega drive it seems that there is not much difference 
in speed between emulator vs actual machine. In the case of mega drive, the basic emulator is faster, so if it is bored with emulator it will 
be dropped by actual machine.

Because of the momentum I made the game system in 2 days, I write almost everything in main.c except the function specific to hardware. 
It will be organized later and will be released including source code. Other people may want to develop on the master system. By the way 
Fix It Felix Jr. also makes the game system in 2 days. If it is roughly two days, only the essential part can be made. 
Although it is difficult for Toro to develop after that ....

The master system is the same as mega drive, and it is easy to handle because there is no habit. At best, the arrangement of the sprite 
attribute table is funny (not a sprite unit structure, but several one-dimensional arrays are lined up). If you code according to the document 
that hackers will bless you will move crispy. However, since we did not initialize unused sprites (filling the sprite attribute table of VRAM 
with zeros) this time, there was a phenomenon that the sprite garbage appeared on the screen when moving on actual machine. This is a place 
where the secured memory is not reproduced by the emulator which is initialized to zero.

By the way, mega drive also like work memory and VRAM become indefinite at power on, so we have to initialize, but the standard initialization 
routine (SEGA.S) for mega drive will initialize various memories and registers So, the user side does not have to be conscious about that point. 
Since the master system does not have a standard initialization routine like this, like SEGA.S, it will be prepared by yourself. In addition, 
there is no mistake to develop at C in the first place, so if you become C you need to prepare a set by yourself. PSG, VDP, I / O and other 
port definitions and bit definitions of registers. 


http://68000.web.fc2.com/oko/